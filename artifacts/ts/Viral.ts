/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as ViralContractJson } from "../ico/Viral.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace ViralTypes {
  export type Fields = {
    tokenId: HexString;
    balance: bigint;
    alphbalance: bigint;
    pricevirl: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export type SellEvent = ContractEvent<{
    from: Address;
    amount: bigint;
    balvirl: bigint;
  }>;
  export type BuyEvent = ContractEvent<{
    to: Address;
    amount: bigint;
    balalph: bigint;
    balvirl: bigint;
  }>;
  export type WithdrawAlphEvent = ContractEvent<{ to: Address }>;

  export interface CallMethodTable {
    getTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    tokenPrice: {
      params: CallContractParams<{ price: bigint; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAlphBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    buyvirl: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    sell: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    removealph: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getBalance: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    tokenPrice: {
      params: SignExecuteContractMethodParams<{
        price: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAlphBalance: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    buyvirl: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    sell: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    removealph: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<ViralInstance, ViralTypes.Fields> {
  encodeFields(fields: ViralTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as ViralTypes.Fields;
  }

  eventIndex = { Sell: 0, Buy: 1, WithdrawAlph: 2 };
  consts = { ErrorCodes: { InvalidCaller: BigInt("3") } };

  at(address: string): ViralInstance {
    return new ViralInstance(address);
  }

  tests = {
    getTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenId", params, getContractByCodeHash);
    },
    getBalance: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getBalance", params, getContractByCodeHash);
    },
    getSymbol: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    tokenPrice: async (
      params: TestContractParamsWithoutMaps<
        ViralTypes.Fields,
        { price: bigint; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "tokenPrice", params, getContractByCodeHash);
    },
    getPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPrice", params, getContractByCodeHash);
    },
    getAlphBalance: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAlphBalance", params, getContractByCodeHash);
    },
    buyvirl: async (
      params: TestContractParamsWithoutMaps<
        ViralTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "buyvirl", params, getContractByCodeHash);
    },
    sell: async (
      params: TestContractParamsWithoutMaps<
        ViralTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "sell", params, getContractByCodeHash);
    },
    removealph: async (
      params: Omit<
        TestContractParamsWithoutMaps<ViralTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "removealph", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Viral = new Factory(
  Contract.fromJson(
    ViralContractJson,
    "",
    "3a2691c56df8b02d727a6b2d5844606c030dc3a2c7061259ac5c99ff24c32e98",
    []
  )
);

// Use this class to interact with the blockchain
export class ViralInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ViralTypes.State> {
    return fetchContractState(Viral, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeSellEvent(
    options: EventSubscribeOptions<ViralTypes.SellEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Viral.contract,
      this,
      options,
      "Sell",
      fromCount
    );
  }

  subscribeBuyEvent(
    options: EventSubscribeOptions<ViralTypes.BuyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Viral.contract,
      this,
      options,
      "Buy",
      fromCount
    );
  }

  subscribeWithdrawAlphEvent(
    options: EventSubscribeOptions<ViralTypes.WithdrawAlphEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Viral.contract,
      this,
      options,
      "WithdrawAlph",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      ViralTypes.SellEvent | ViralTypes.BuyEvent | ViralTypes.WithdrawAlphEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Viral.contract, this, options, fromCount);
  }

  view = {
    getTokenId: async (
      params?: ViralTypes.CallMethodParams<"getTokenId">
    ): Promise<ViralTypes.CallMethodResult<"getTokenId">> => {
      return callMethod(
        Viral,
        this,
        "getTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params?: ViralTypes.CallMethodParams<"getBalance">
    ): Promise<ViralTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        Viral,
        this,
        "getBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSymbol: async (
      params?: ViralTypes.CallMethodParams<"getSymbol">
    ): Promise<ViralTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        Viral,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: ViralTypes.CallMethodParams<"getName">
    ): Promise<ViralTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Viral,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    tokenPrice: async (
      params: ViralTypes.CallMethodParams<"tokenPrice">
    ): Promise<ViralTypes.CallMethodResult<"tokenPrice">> => {
      return callMethod(
        Viral,
        this,
        "tokenPrice",
        params,
        getContractByCodeHash
      );
    },
    getPrice: async (
      params?: ViralTypes.CallMethodParams<"getPrice">
    ): Promise<ViralTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        Viral,
        this,
        "getPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAlphBalance: async (
      params?: ViralTypes.CallMethodParams<"getAlphBalance">
    ): Promise<ViralTypes.CallMethodResult<"getAlphBalance">> => {
      return callMethod(
        Viral,
        this,
        "getAlphBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    buyvirl: async (
      params: ViralTypes.CallMethodParams<"buyvirl">
    ): Promise<ViralTypes.CallMethodResult<"buyvirl">> => {
      return callMethod(Viral, this, "buyvirl", params, getContractByCodeHash);
    },
    sell: async (
      params: ViralTypes.CallMethodParams<"sell">
    ): Promise<ViralTypes.CallMethodResult<"sell">> => {
      return callMethod(Viral, this, "sell", params, getContractByCodeHash);
    },
    removealph: async (
      params?: ViralTypes.CallMethodParams<"removealph">
    ): Promise<ViralTypes.CallMethodResult<"removealph">> => {
      return callMethod(
        Viral,
        this,
        "removealph",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTokenId: async (
      params: ViralTypes.SignExecuteMethodParams<"getTokenId">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getTokenId">> => {
      return signExecuteMethod(Viral, this, "getTokenId", params);
    },
    getBalance: async (
      params: ViralTypes.SignExecuteMethodParams<"getBalance">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getBalance">> => {
      return signExecuteMethod(Viral, this, "getBalance", params);
    },
    getSymbol: async (
      params: ViralTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(Viral, this, "getSymbol", params);
    },
    getName: async (
      params: ViralTypes.SignExecuteMethodParams<"getName">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(Viral, this, "getName", params);
    },
    tokenPrice: async (
      params: ViralTypes.SignExecuteMethodParams<"tokenPrice">
    ): Promise<ViralTypes.SignExecuteMethodResult<"tokenPrice">> => {
      return signExecuteMethod(Viral, this, "tokenPrice", params);
    },
    getPrice: async (
      params: ViralTypes.SignExecuteMethodParams<"getPrice">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getPrice">> => {
      return signExecuteMethod(Viral, this, "getPrice", params);
    },
    getAlphBalance: async (
      params: ViralTypes.SignExecuteMethodParams<"getAlphBalance">
    ): Promise<ViralTypes.SignExecuteMethodResult<"getAlphBalance">> => {
      return signExecuteMethod(Viral, this, "getAlphBalance", params);
    },
    buyvirl: async (
      params: ViralTypes.SignExecuteMethodParams<"buyvirl">
    ): Promise<ViralTypes.SignExecuteMethodResult<"buyvirl">> => {
      return signExecuteMethod(Viral, this, "buyvirl", params);
    },
    sell: async (
      params: ViralTypes.SignExecuteMethodParams<"sell">
    ): Promise<ViralTypes.SignExecuteMethodResult<"sell">> => {
      return signExecuteMethod(Viral, this, "sell", params);
    },
    removealph: async (
      params: ViralTypes.SignExecuteMethodParams<"removealph">
    ): Promise<ViralTypes.SignExecuteMethodResult<"removealph">> => {
      return signExecuteMethod(Viral, this, "removealph", params);
    },
  };

  async multicall<Calls extends ViralTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ViralTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Viral,
      this,
      calls,
      getContractByCodeHash
    )) as ViralTypes.MultiCallResults<Calls>;
  }
}
