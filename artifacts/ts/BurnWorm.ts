/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as BurnWormContractJson } from "../burnworm/BurnWorm.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace BurnWormTypes {
  export type Fields = {
    ngu: HexString;
    ngufee: bigint;
    alphfee: bigint;
    owner: Address;
    alphbalance: bigint;
    ngubalance: bigint;
  };

  export type State = ContractState<Fields>;

  export type BurnEvent = ContractEvent<{
    token: HexString;
    amount: bigint;
    who: Address;
    when: bigint;
  }>;
  export type DestroyEvent = ContractEvent<{ from: Address }>;

  export interface CallMethodTable {
    getNgu: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNguFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAlphFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    burntokenalph: {
      params: CallContractParams<{ id: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    burntokenngu: {
      params: CallContractParams<{ id: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawalph: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdrawngu: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    destroy: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getNgu: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNguFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAlphFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    burntokenalph: {
      params: SignExecuteContractMethodParams<{
        id: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    burntokenngu: {
      params: SignExecuteContractMethodParams<{
        id: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawalph: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdrawngu: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    destroy: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<BurnWormInstance, BurnWormTypes.Fields> {
  encodeFields(fields: BurnWormTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as BurnWormTypes.Fields;
  }

  eventIndex = { Burn: 0, Destroy: 1 };
  consts = { Error: { InvalidCaller: BigInt("0") } };

  at(address: string): BurnWormInstance {
    return new BurnWormInstance(address);
  }

  tests = {
    getNgu: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNgu", params, getContractByCodeHash);
    },
    getNguFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getNguFee", params, getContractByCodeHash);
    },
    getAlphFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAlphFee", params, getContractByCodeHash);
    },
    burntokenalph: async (
      params: TestContractParamsWithoutMaps<
        BurnWormTypes.Fields,
        { id: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "burntokenalph", params, getContractByCodeHash);
    },
    burntokenngu: async (
      params: TestContractParamsWithoutMaps<
        BurnWormTypes.Fields,
        { id: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "burntokenngu", params, getContractByCodeHash);
    },
    withdrawalph: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawalph", params, getContractByCodeHash);
    },
    withdrawngu: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawngu", params, getContractByCodeHash);
    },
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<BurnWormTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const BurnWorm = new Factory(
  Contract.fromJson(
    BurnWormContractJson,
    "",
    "45c04aaa72aa49d87bb9b33d6078ebf49299e6facc49f381e85ef5b7eb8ee69a",
    []
  )
);

// Use this class to interact with the blockchain
export class BurnWormInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BurnWormTypes.State> {
    return fetchContractState(BurnWorm, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeBurnEvent(
    options: EventSubscribeOptions<BurnWormTypes.BurnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      BurnWorm.contract,
      this,
      options,
      "Burn",
      fromCount
    );
  }

  subscribeDestroyEvent(
    options: EventSubscribeOptions<BurnWormTypes.DestroyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      BurnWorm.contract,
      this,
      options,
      "Destroy",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      BurnWormTypes.BurnEvent | BurnWormTypes.DestroyEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(BurnWorm.contract, this, options, fromCount);
  }

  view = {
    getNgu: async (
      params?: BurnWormTypes.CallMethodParams<"getNgu">
    ): Promise<BurnWormTypes.CallMethodResult<"getNgu">> => {
      return callMethod(
        BurnWorm,
        this,
        "getNgu",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNguFee: async (
      params?: BurnWormTypes.CallMethodParams<"getNguFee">
    ): Promise<BurnWormTypes.CallMethodResult<"getNguFee">> => {
      return callMethod(
        BurnWorm,
        this,
        "getNguFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAlphFee: async (
      params?: BurnWormTypes.CallMethodParams<"getAlphFee">
    ): Promise<BurnWormTypes.CallMethodResult<"getAlphFee">> => {
      return callMethod(
        BurnWorm,
        this,
        "getAlphFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    burntokenalph: async (
      params: BurnWormTypes.CallMethodParams<"burntokenalph">
    ): Promise<BurnWormTypes.CallMethodResult<"burntokenalph">> => {
      return callMethod(
        BurnWorm,
        this,
        "burntokenalph",
        params,
        getContractByCodeHash
      );
    },
    burntokenngu: async (
      params: BurnWormTypes.CallMethodParams<"burntokenngu">
    ): Promise<BurnWormTypes.CallMethodResult<"burntokenngu">> => {
      return callMethod(
        BurnWorm,
        this,
        "burntokenngu",
        params,
        getContractByCodeHash
      );
    },
    withdrawalph: async (
      params?: BurnWormTypes.CallMethodParams<"withdrawalph">
    ): Promise<BurnWormTypes.CallMethodResult<"withdrawalph">> => {
      return callMethod(
        BurnWorm,
        this,
        "withdrawalph",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdrawngu: async (
      params?: BurnWormTypes.CallMethodParams<"withdrawngu">
    ): Promise<BurnWormTypes.CallMethodResult<"withdrawngu">> => {
      return callMethod(
        BurnWorm,
        this,
        "withdrawngu",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    destroy: async (
      params?: BurnWormTypes.CallMethodParams<"destroy">
    ): Promise<BurnWormTypes.CallMethodResult<"destroy">> => {
      return callMethod(
        BurnWorm,
        this,
        "destroy",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getNgu: async (
      params: BurnWormTypes.SignExecuteMethodParams<"getNgu">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"getNgu">> => {
      return signExecuteMethod(BurnWorm, this, "getNgu", params);
    },
    getNguFee: async (
      params: BurnWormTypes.SignExecuteMethodParams<"getNguFee">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"getNguFee">> => {
      return signExecuteMethod(BurnWorm, this, "getNguFee", params);
    },
    getAlphFee: async (
      params: BurnWormTypes.SignExecuteMethodParams<"getAlphFee">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"getAlphFee">> => {
      return signExecuteMethod(BurnWorm, this, "getAlphFee", params);
    },
    burntokenalph: async (
      params: BurnWormTypes.SignExecuteMethodParams<"burntokenalph">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"burntokenalph">> => {
      return signExecuteMethod(BurnWorm, this, "burntokenalph", params);
    },
    burntokenngu: async (
      params: BurnWormTypes.SignExecuteMethodParams<"burntokenngu">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"burntokenngu">> => {
      return signExecuteMethod(BurnWorm, this, "burntokenngu", params);
    },
    withdrawalph: async (
      params: BurnWormTypes.SignExecuteMethodParams<"withdrawalph">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"withdrawalph">> => {
      return signExecuteMethod(BurnWorm, this, "withdrawalph", params);
    },
    withdrawngu: async (
      params: BurnWormTypes.SignExecuteMethodParams<"withdrawngu">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"withdrawngu">> => {
      return signExecuteMethod(BurnWorm, this, "withdrawngu", params);
    },
    destroy: async (
      params: BurnWormTypes.SignExecuteMethodParams<"destroy">
    ): Promise<BurnWormTypes.SignExecuteMethodResult<"destroy">> => {
      return signExecuteMethod(BurnWorm, this, "destroy", params);
    },
  };

  async multicall<Calls extends BurnWormTypes.MultiCallParams>(
    calls: Calls
  ): Promise<BurnWormTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      BurnWorm,
      this,
      calls,
      getContractByCodeHash
    )) as BurnWormTypes.MultiCallResults<Calls>;
  }
}
