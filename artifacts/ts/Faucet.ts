/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FaucetContractJson } from "../faucet/Faucet.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FaucetTypes {
  export type Fields = {
    tokenId: HexString;
    balance: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export type TopupEvent = ContractEvent<{ from: Address; amount: bigint }>;
  export type SendoutEvent = ContractEvent<{ to: Address; amount: bigint }>;
  export type DestroyEvent = ContractEvent<{ to: Address }>;

  export interface CallMethodTable {
    getTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<FaucetInstance, FaucetTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FaucetTypes.Fields;
  }

  eventIndex = { Topup: 0, Sendout: 1, Destroy: 2 };
  consts = {
    ErrorCodes: {
      InvalidWithdraw: BigInt(1),
      InvalidTopup: BigInt(2),
      InvalidCaller: BigInt(3),
    },
  };

  at(address: string): FaucetInstance {
    return new FaucetInstance(address);
  }

  tests = {
    getTokenId: async (
      params: Omit<TestContractParams<FaucetTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getTokenId", params);
    },
    getBalance: async (
      params: Omit<TestContractParams<FaucetTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalance", params);
    },
    getSymbol: async (
      params: Omit<TestContractParams<FaucetTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<TestContractParams<FaucetTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    topup: async (
      params: TestContractParams<FaucetTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "topup", params);
    },
    sendout: async (
      params: TestContractParams<FaucetTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "sendout", params);
    },
    destroy: async (
      params: Omit<TestContractParams<FaucetTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Faucet = new Factory(
  Contract.fromJson(
    FaucetContractJson,
    "",
    "8813de5a4adb21e4e0ea09357924ec19037b916ecfd6a228152238f8e9396d04"
  )
);

// Use this class to interact with the blockchain
export class FaucetInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FaucetTypes.State> {
    return fetchContractState(Faucet, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeTopupEvent(
    options: EventSubscribeOptions<FaucetTypes.TopupEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Faucet.contract,
      this,
      options,
      "Topup",
      fromCount
    );
  }

  subscribeSendoutEvent(
    options: EventSubscribeOptions<FaucetTypes.SendoutEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Faucet.contract,
      this,
      options,
      "Sendout",
      fromCount
    );
  }

  subscribeDestroyEvent(
    options: EventSubscribeOptions<FaucetTypes.DestroyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Faucet.contract,
      this,
      options,
      "Destroy",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | FaucetTypes.TopupEvent
      | FaucetTypes.SendoutEvent
      | FaucetTypes.DestroyEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Faucet.contract, this, options, fromCount);
  }

  methods = {
    getTokenId: async (
      params?: FaucetTypes.CallMethodParams<"getTokenId">
    ): Promise<FaucetTypes.CallMethodResult<"getTokenId">> => {
      return callMethod(
        Faucet,
        this,
        "getTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params?: FaucetTypes.CallMethodParams<"getBalance">
    ): Promise<FaucetTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        Faucet,
        this,
        "getBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSymbol: async (
      params?: FaucetTypes.CallMethodParams<"getSymbol">
    ): Promise<FaucetTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        Faucet,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: FaucetTypes.CallMethodParams<"getName">
    ): Promise<FaucetTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Faucet,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends FaucetTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FaucetTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Faucet,
      this,
      calls,
      getContractByCodeHash
    )) as FaucetTypes.MultiCallResults<Calls>;
  }
}
