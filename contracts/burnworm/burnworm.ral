Contract BurnWorm (
	ngu: ByteVec,
	ngufee: U256,
	alphfee: U256, 
	owner: Address,
  	mut alphbalance: U256,
  	mut ngubalance: U256
) {
	// Events
	event Burn(token: ByteVec, amount: U256, who: Address, when: U256)
	event Destroy(from: Address)

	enum Error {
		InvalidCaller = 0
	}

	pub fn getNgu() -> ByteVec {
		return ngu
	}

	pub fn getNguFee() -> U256 {
		return ngufee
	}

	pub fn getAlphFee() -> U256 {
		return alphfee
	}

	@using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
	pub fn burntokenalph(id: ByteVec, amount: U256) -> () {

		let caller = callerAddress!()

		transferToken!(caller, selfAddress!(), ALPH, getAlphFee())

    	alphbalance = alphbalance + getAlphFee()

		burnToken!(caller, id, amount)

		emit Burn(id, amount, caller, blockTimeStamp!())
	}

	@using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
	pub fn burntokenngu(id: ByteVec, amount: U256) -> () {

		let caller = callerAddress!()

		transferToken!(caller, selfAddress!(), getNgu(), getNguFee())

    	ngubalance = ngubalance + getNguFee()

		burnToken!(caller, id, amount)

		emit Burn(id, amount, caller, blockTimeStamp!())
	}


	@using(updateFields = true, checkExternalCaller = true, assetsInContract = true)
	pub fn withdrawalph() -> () {

    	let caller = callerAddress!()

    	checkCaller!(caller == owner, Error.InvalidCaller)

    	transferToken!(selfAddress!(), owner, ALPH, alphbalance)

    	alphbalance = alphbalance - alphbalance
  	}
	
	
  	@using(updateFields = true, checkExternalCaller = true, assetsInContract = true)
		pub fn withdrawngu() -> () {
    
    	let caller = callerAddress!()

    	checkCaller!(caller == owner, Error.InvalidCaller)

    	transferToken!(selfAddress!(), owner, getNgu(), ngubalance)

    	ngubalance = ngubalance - ngubalance
  	}

	@using(assetsInContract = true, checkExternalCaller = true)
    pub fn destroy() -> () {
        checkCaller!(callerAddress!() == owner, Error.InvalidCaller)
        destroySelf!(owner)
    }
}
