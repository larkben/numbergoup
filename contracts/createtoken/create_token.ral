Contract CreateToken(
    owner: Address,         //* Creator
    contract: ByteVec       //* Token Contract
) {

    event Destroy(user: Address)
    event CreateToken(user: Address, contract: ByteVec, name: ByteVec, symbol: ByteVec, totalsupply: U256: decimals: U256)

    enum ErrorCodes {
        InvalidCaller = 1
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = false, checkExternalCaller = false)
    pub fn buildtoken(symbol: ByteVec, name: ByteVec, decimals: U256, tokenTotal: U256) -> (ByteVec) {

        let minter = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Token.encodeFields!(symbol, name, decimals, tokenTotal, minter)

        let contractID = copyCreateContractWithToken!{minter -> ALPH: 1 alph}(
            contract,                                                                                  
            encodeImmutableFields,
            encodeMutableFields,
            tokenTotal,
            minter
        )

        emit CreateToken(minter, contractID, name, symbol, tokenTotal, decimals)

        return contractID
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroycreator() -> () {

        let caller = callerAddress!()

        checkCaller!(owner == caller, ErrorCodes.InvalidCaller)

        destroySelf!(owner)

        emit Destroy(owner)
    }
}